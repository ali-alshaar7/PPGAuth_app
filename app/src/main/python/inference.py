import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.mobile_optimizer import optimize_for_mobile
from torch.autograd import profiler
from preproc import *

# Define Siamese CNN architecture
class SiameseCNN(nn.Module):
    def __init__(self):
        super(SiameseCNN, self).__init__()
        self.cnn = nn.Sequential(
            nn.Conv1d(1, 16, kernel_size=3),
            nn.ReLU(inplace=True),
            nn.MaxPool1d(kernel_size=2),
            nn.BatchNorm1d(16),
            
            nn.Conv1d(16, 32, kernel_size=3),
            nn.ReLU(inplace=True),
            nn.MaxPool1d(kernel_size=2),
            nn.BatchNorm1d(32),
            
            nn.Conv1d(32, 64, kernel_size=3),
            nn.ReLU(inplace=True),
            nn.MaxPool1d(kernel_size=2),
            nn.BatchNorm1d(64),

            nn.Flatten()
        )
        self.fc = nn.Sequential(
            nn.Linear(256, 64),
            nn.ReLU(inplace=True),

            nn.Linear(64, 16),
            nn.ReLU(inplace=True),

            nn.Linear(16, 1),
            nn.Sigmoid(),

        )

    def forward_one(self, x):
        return self.cnn(x)

    def forward(self, input1, input2):
        input1 = input1.unsqueeze(0).unsqueeze(0)
        input2 = input2.unsqueeze(0).unsqueeze(0)
        output1 = self.forward_one(input1)
        output2 = self.forward_one(input2)

        subtracted_output = output1 - output2
        output = self.fc(subtracted_output)
        return output

def test(model):
    my_array = [113720, 113745, 113772, 113811, 113831, 113848, 113863, 113881, 113868, 113186, 113623, 113666, 113679, 113733, 113773, 113798, 113820, 113843, 0, 113286, 113602, 113641, 113707, 113737, 113776, 113800, 113815, 113833, 113849, 113860, 113875, 113511, 113619, 113682, 113704, 113737, 113778, 113808, 113822, 113848, 113868, 113877, 113870, 113238, 113651, 113706, 113705, 113763, 113793, 113813, 113824, 113834, 113842, 113872, 113859, 113312, 113688, 113713, 113721, 113778, 113832, 113839, 113848, 113881, 113895, 113915, 113331, 113666, 113776, 113758, 113807, 113851, 113862, 113874, 113883, 113906, 113536, 113694, 113759, 113786, 113789, 113832, 113863, 113865, 113884, 113914, 113914, 113919, 113508, 113710, 113741, 113775, 113781, 113842, 113870, 113878, 113890, 113922, 113928, 113926]
    my_array2 = [114309, 114325, 114347, 114357, 112913, 113759, 113993, 113996, 114097, 114184, 114219, 114263, 114288, 114304, 114336, 113940, 113396, 113801, 113979, 113977, 114056, 114148, 114206, 114242, 114287, 114329, 113159, 113687, 113879, 113992, 113992, 114119, 114201, 114245, 114277, 114301, 114339, 114346, 112874, 113790, 114006, 113994, 114091, 114179, 114233, 114266, 114318, 114324, 114363, 114380, 113103, 113870, 113980, 114103, 114161, 114306, 114339, 114375, 114419, 114449, 113824, 114078, 114125, 114213, 114237, 114305, 114356, 114391, 114402, 114429, 114450, 114204, 114017, 114026, 114193, 114185, 114274, 114336, 114359, 114391, 114411, 114431, 114455, 114432, 113511, 114042, 114147, 114170, 114266, 114319, 114352, 114377, 114403, 114421, 113738, 113830, 114011, 114103, 114124, 114235]
    my_array3 = [114086, 113685, 113935, 113951, 113947, 113989, 114025, 114037, 114043, 114083, 114087, 113654, 113913, 113958, 113963, 114014, 114038, 114067, 114086, 114116, 114127, 114163, 114164, 113558, 113925, 113960, 113978, 114032, 114074, 114102, 114129, 114146, 114172, 114176, 114191, 113667, 113940, 113972, 114013, 114029, 114081, 114109, 114127, 114149, 114178, 114188, 114055, 113821, 114029, 114036, 114083, 114124, 114139, 114157, 114185, 114198, 114214, 113769, 113838, 113966, 114017, 114040, 114091, 114122, 114151, 114178, 114216, 114235, 114254, 113926, 114048, 114119, 114128, 114202, 114244, 114271, 114292, 114319, 114342, 114363, 114031, 114093, 114165, 114192, 114223, 114252, 114279, 114286, 114324, 114159, 113899, 114085, 114149, 114164, 114190, 114220, 114247, 114267, 114297, 114065]
    my_array4 = [113759, 113796, 113801, 113834, 113891, 113889, 113894, 113926, 113935, 113948, 113842, 113642, 113786, 113794, 113800, 113858, 113884, 113906, 113918, 113941, 113932, 113531, 113773, 113804, 113823, 113875, 113895, 113921, 113935, 113967, 113986, 113990, 113688, 113790, 113826, 113836, 113884, 113910, 113928, 113941, 113974, 113999, 114018, 114032, 114028, 113520, 113844, 113882, 113890, 113927, 113965, 113989, 114007, 114029, 114040, 114064, 114077, 113610, 113884, 113914, 113908, 113936, 113978, 113997, 114009, 114027, 114041, 114070, 113987, 113840, 113890, 113908, 113921, 113973, 113999, 114019, 114040, 114061, 114086, 114093, 113700, 113837, 113904, 113939, 113970, 114002, 114018, 114040, 114042, 114066, 114081, 114093, 113637, 113873, 113912, 113917, 113947, 114009, 114029, 114040]
    my_array5 = [113834, 113842, 113872, 113859, 113312, 113688, 113713, 113721, 113778, 113832, 113839, 113848, 113881, 113895, 113915, 113331, 113666, 113776, 113758, 113807, 113851, 113862, 113874, 113883, 113906, 113536, 113694, 113759, 113786, 113789, 113832, 113863, 113865, 113884, 113914, 113914, 113919, 113508, 113710, 113741, 113775, 113781, 113842, 113870, 113878, 113890, 113922, 113928, 113926, 113785, 113662, 113759, 113796, 113801, 113834, 113891, 113889, 113894, 113926, 113935, 113948, 113842, 113642, 113786, 113794, 113800, 113858, 113884, 113906, 113918, 113941, 113932, 113531, 113773, 113804, 113823, 113875, 113895, 113921, 113935, 113967, 113986, 113990, 113688, 113790, 113826, 113836, 113884, 113910, 113928, 113941, 113974, 113999, 114018, 114032, 114028, 113520, 113844, 113882, 113890]


    p = sig_preproc(my_array)
    p2 = sig_preproc(my_array2)
    p3 = sig_preproc(my_array3)
    p4 = sig_preproc(my_array4)
    p5 = sig_preproc(my_array5)

    input1 = torch.Tensor(p).cuda()
    input2 = torch.Tensor(p2).cuda()
    input3 = torch.Tensor(p3).cuda()
    input4 = torch.Tensor(p4).cuda()
    input5 = torch.Tensor(p5).cuda()

    model.eval()
    with torch.no_grad():

        output = model(input2, input5)
        prediction = 1 if output > 0.5 else 0
        print(output)


# Instantiate the Siamese CNN model, loss function, and optimizer
model = SiameseCNN()
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)

model.load_state_dict(torch.load('model_params.pt'))

def serialize(model):
    model.eval()

    example1 = torch.rand(50)
    example2 = torch.rand(50)
    traced_script_module = torch.jit.trace(model, (example1, example2))
    traced_script_module_optimized = optimize_for_mobile(traced_script_module)
    traced_script_module_optimized._save_for_lite_interpreter("droid_model.pt")

serialize(model)